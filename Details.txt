
==== String Functions ====

str.isalnum()
str.isalpha()
str.isdigit()
str.islower()
str.isupper()

srt.ljust(width, "-")
str.cjust(width, "-")
str.rjust(width, "-")



==== List Functions ====





==== Set Functions ====

s = set()
s.add([element])
s.remove([element])
s.discard([element])

Union - Belongs to both the set and iterable
- setA.union(setB [or any iterable])
- setA | setB

Intersection - Common between the set and the iterable
- setA.intersection(setB [or any iterable])
- setA & setB

Difference - Present in setA but not in setB
- setA.difference(setB)
- setA - setB

Symmetric Difference - Present in either setA or setB but not in both
- setA.symmetric_difference(setB [or any iterable])
- setA ^ setB

Union Update
- .update() or |=
- Update the set by adding elements from an iterable/another set

Intersection Update
- .intersection_update() or &=
- Update the set by keeping only the elements found in it and an iterable/another set.

Difference Update
- .difference_update() or -=
- Update the set by removing elements found in an iterable/another set.

Symmetric Difference Update
- .symmetric_difference_update() or ^=
- Update the set by only keeping the elements found in either set, but not in both.



==== Complex Numbers ====

complex(arg) - it will create a complex number from the given arg
arg can be in the form of complex number "1+2j" or polar cordinates (1.0, 0.0)

complex_number.real = it will give real part
complex_number.imag = it will give imaginery part

cmath.phase(complex_number) - it will give phase angle of a complex number
arg(complex_number) - it will give modulus of a complex number



==== Itertools ====

1. itertools.product()
This tool computes the cartesian product of input iterables.
It is equivalent to nested for-loops.
For example, product(A, B) returns the same as ((x,y) for x in A for y in B).

2. itertools.permutations(iterable [, R])
This tool returns successive R length permutations of elements in an iterable.
If R is not specified or is None, then R defaults to the length of the iterable, and all possible full length permutations are generated.
Permutations are printed in a lexicographic sorted order. So, if the input iterable is sorted, the permutation tuples will be produced in a sorted order.

3. itertools.combinations(iterable, R)
This tool returns the R length subsequences of elements from the input iterable.
Combinations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.

4. itertools.combinations_with_replacement(iterable, R)
This tool returns R length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.
Combinations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.

5. itertools.groupby(iterable, key_function)
It returns the sequential occurences of items in the iterable by using the key_function.



==== Collections ====


1. collections.Counter()

A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values.

>>> from collections import Counter

>>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]
>>> print Counter(myList)
Counter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})

>>> print Counter(myList).items()
[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]

>>> print Counter(myList).keys()
[1, 2, 3, 4, 5]

>>> print Counter(myList).values()
[3, 4, 4, 2, 1]


2. collections.defaultdict()

The defaultdict tool is a container in the collections class of Python. It's similar to the usual dictionary (dict) container, but the only difference is that a defaultdict will have a default value if that key has not been set yet. If you didn't use a defaultdict you'd have to check to see if that key exists, and if it doesn't, set it to what you want.

For example:
from collections import defaultdict
d = defaultdict(list)
d['python'].append("awesome")
d['something-else'].append("not relevant")
d['python'].append("language")
for i in d.items():
    print i

This prints:
('python', ['awesome', 'language'])
('something-else', ['not relevant'])


3. collections.namedtuple()

Basically, namedtuples are easy to create, lightweight object types.
They turn tuples into convenient containers for simple tasks.
With namedtuples, you donâ€™t have to use integer indices for accessing members of a tuple.

Example1:
>>> from collections import namedtuple
>>> Point = namedtuple('Point','x,y')
>>> pt1 = Point(1,2)
>>> pt2 = Point(3,4)
>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )
>>> print dot_product
11

Example 2:
>>> from collections import namedtuple
>>> Car = namedtuple('Car','Price Mileage Colour Class')
>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')
>>> print xyz
Car(Price=100000, Mileage=30, Colour='Cyan', Class='Y')
>>> print xyz.Class
Y


4. collections.OrderedDict

An OrderedDict is a dictionary that remembers the order of the keys that were inserted first. If a new entry overwrites an existing entry, the original insertion position is left unchanged.


5. collections.deque()

A deque is a double-ended queue. It can be used to add or remove elements from both ends.
Deques support thread safe, memory efficient appends and pops from either side of the deque with approximately the same  performance in either direction.

Example Code:

>>> from collections import deque
>>> d = deque()
>>> d.append(1)
>>> print d
deque([1])
>>> d.appendleft(2)
>>> print d
deque([2, 1])
>>> d.clear()
>>> print d
deque([])
>>> d.extend('1')
>>> print d
deque(['1'])
>>> d.extendleft('234')
>>> print d
deque(['4', '3', '2', '1'])
>>> d.count('1')
1
>>> d.pop()
'1'
>>> print d
deque(['4', '3', '2'])
>>> d.popleft()
'4'
>>> print d
deque(['3', '2'])
>>> d.extend('7896')
>>> print d
deque(['3', '2', '7', '8', '9', '6'])
>>> d.remove('2')
>>> print d
deque(['3', '7', '8', '9', '6'])
>>> d.reverse()
>>> print d
deque(['6', '9', '8', '7', '3'])
>>> d.rotate(3)
>>> print d
deque(['8', '7', '3', '6', '9'])